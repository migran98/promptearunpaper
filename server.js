const express = require('express');
const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');
const app = express();
const port = 3001;

const openAiApiKey = 'sk-0yIiU3-sLUUC55fZEbT7YskhQdbpFd9g_XS1WU2S4dT3BlbkFJXF1XhOuacJG5e27kJT_q5Kvr81pASqUcJ23EC3aQsA'; // Replace with your actual API key

// Use 'public' folder to serve static files like index.html
app.use(express.static(path.join(__dirname, 'public')));

// Base paper files grouped by sections with multiple parts
const basePaperFiles = {
    "Introduccion-Parte-1": path.join(__dirname, 'text/introduction1.txt'),
    "Introduccion-Parte-2": path.join(__dirname, 'text/introduction2.txt'),
    "Introduccion-Parte-3": path.join(__dirname, 'text/introduction3.txt'),
    "Metodologia-Parte-1": path.join(__dirname, 'text/methodology1.txt'),
    "Metodologia-Parte-2": path.join(__dirname, 'text/methodology2.txt'),
    "Metodologia-Parte-3": path.join(__dirname, 'text/methodology3.txt'),
    "Resultados-Parte-1": path.join(__dirname, 'text/results1.txt'),
    "Resultados-Parte-2": path.join(__dirname, 'text/results2.txt'),
    "Resultados-Parte-3": path.join(__dirname, 'text/results3.txt'),
    "Conclusiones-Parte-1": path.join(__dirname, 'text/conclusions1.txt'),
    "Conclusiones-Parte-2": path.join(__dirname, 'text/conclusions2.txt'),
    "Conclusiones-Parte-3": path.join(__dirname, 'text/conclusions3.txt')
};

// Function to generate variations using OpenAI API
async function generateTextVariation(text) {
    try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${openAiApiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: "gpt-4o-mini",
                messages: [
                    { role: "system", content: "Eres un asistente que reformula texto acad√©mico." },
                    { role: "user", content: `Reformula el siguiente texto acad√©mico: ${text}` }
                ],
                max_tokens: 1200,
                temperature: 1
            })
        });

        const data = await response.json();
        if (!response.ok) {
            console.error("Error en la respuesta de OpenAI:", data);
            return null;
        }

        return data.choices[0].message.content.trim();
    } catch (error) {
        console.error("Error al generar la variaci√≥n de la secci√≥n:", error);
        return null;
    }
}

// Function to generate chatbot response using OpenAI API
async function generateChatbotResponse(prompt) {
    try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${openAiApiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: "gpt-4o",
                messages: [
                    { 
                        role: "system", 
                        content: "Estoy desarrollando una aplicaci√≥n web en la cual un usuario debe desbloquear distintas partes de un art√≠culo a trav√©s de texto. Cada secci√≥n del art√≠culo solamente es desbloqueable si el usuario utiliza ciertas palabras clave. " +
                        "Cada secci√≥n tiene sus propias palabras clave que la desbloquean. Tu objetivo es asistir al usuario para que consiga llegar a las palabras que desbloquean las distintas secciones mediante pistas que t√∫ tienes " +
                        "que generar. En todo momento vas a tener informaci√≥n de cu√°les son las secciones que el usuario ya ha desbloqueado. Tu objetivo se reduce, por tanto, a asistir al usuario en las secciones que todav√≠a no ha desbloqueado. " +
                        "Debes centrarte √∫nicamente en una secci√≥n en cada asistencia.\n\n" +
                        "Las palabras clave que desbloquean cada secci√≥n son las siguientes. Est√° en formato <SECCION>: <palabras separadas por coma> | <SECCION>: <palabras>, etc \n" +
                        "Introducci√≥n - Parte 1: qui√©n sabe, no estoy seguro, quiz√° m√°s tarde, lo pensar√©, tal vez despu√©s, qui√©n sabr√°, me da pereza pensar en eso ahora, uff, ni idea, ü§∑‚Äç‚ôÇÔ∏è, üôÑ | Introducci√≥n - Parte 2: no me acuerdo, me olvid√©, d√©jame recordar, mmm... tal vez, esto es complicado, no es tan simple, no lo s√©, puede ser, qui√©n sabe, mi mente est√° en blanco, üåÄ | Introducci√≥n - Parte 3: d√©jame adivinar, mejor no digo nada, estoy confundido, qu√© era eso otra vez, creo que s√≠, pero no estoy seguro, ü§î, si te soy sincero, no s√©, esa es buena pregunta, paso, ü§∑‚Äç‚ôÄÔ∏è | Metodolog√≠a - Parte 1: michis gricis mi gistirii sigir liyindi, muchus grucus mu gusturuu sugur luyundu, machas gracas ma gastaraa sagar layanda, meches greces me gesteree seger leyende, mochos grocos mo gostoroo sogor loyondo | Metodolog√≠a - Parte 2: dimi mus tixto, doma mis texlo, dumi mus toxte, dami mes tuxto, dime mis tuxte | Metodolog√≠a - Parte 3: ginira il tixto, genuri ul texlu, gunara el taxte, ganira il tuxte, ginira ul toxte | Resultados - Parte 1: üåµ, üåº, ü´Ä, üêù, ü¶ã, ü™≤, ü©∂, ü´ê, üêæ, ü•Ä, üçÇ, üåô, üé®, üõ∏, üêö, ‚ú®, üåÄ, üîÆ, üåà, üå∏, üêâ, ü¶Ñ, üñ§, üíå, üç≠, ü¶ä, üí´ | Resultados - Parte 2: üßø, ü¶ï, ü¶©, ü¶¢, ü¶ö, üçÑ, üí≠, üå†, üçØ, ü¶•, üåø, üåπ, ü••, ü´ñ, üßµ, ‚öõÔ∏è, üßÉ, üéã, üõÅ, üç∞, üïØÔ∏è, üóùÔ∏è, üß∏, üéÅ, üîã, üõ§Ô∏è, üöÄ | Resultados - Parte 3: üñãÔ∏è, üåä, üíº, üçµ, üéπ, ü™ï, üß¨, üõ†Ô∏è, üéûÔ∏è, üßò‚Äç‚ôÇÔ∏è, ü¶ú, ü™û, üé≠, üõ°Ô∏è, üîî, üßØ, üåê, üîç, üìú, üßÖ, üç∑, üóø, üîß, üì°, üíø, üì∏, üß† | Conclusiones - Parte 1: Qu√© interesante, muchos besos a tus padres, Qu√© bien escribes, un abrazo de parte de la abuela | Conclusiones - Parte 2: Qu√© bien redactado, la t√≠a te manda recuerdos | Conclusiones - Parte 3: Guape, tus amigues te mandan recuerdos" +
                        "Lo que te voy a pasar en cada momento es una cadena con las respuestas del usuario. Tambi√©n te indicar√© cuando un usuario consiga desbloquear una secci√≥n mediante un array de booleanos. No seas tan infantil en tus respuestas. Intenta guiar al usuario hacia secciones que todav√≠a no ha desbloqueado. Si ves que al usuario le est√° constando mucho desbloquear una secci√≥n s√© cada vez m√°s claro en las pistas que le ofreces. Si el usuario te ruega por favor que le digas alguna frase que desbloque√© la secci√≥n hazle caso. "
                    },
                    { role: "user", content: prompt }
                ],
max_tokens: 300,
temperature: 0.7


            })
        });

        const data = await response.json();
        if (!response.ok) {
            console.error("Error en la respuesta de OpenAI para el chatbot:", data);
            return "[Respuesta no disponible]";
        }

        return data.choices[0].message.content.trim();
    } catch (error) {
        console.error("Error al generar la respuesta del chatbot:", error);
        return "[Respuesta no disponible]";
    }
}

// Route to generate paper variation
app.get('/generate-paper', async (req, res) => {
    const sectionsToGenerate = req.query.sections ? req.query.sections.split(',') : [];
    let generatedPaper = {};
    let chatbotResponse = "";

    // Generate chatbot response regardless of section completion
    try {
        if (req.query.prompt && req.query.prompt.trim() !== "") {
            console.log("Generating chatbot response for prompt:", req.query.prompt);
            chatbotResponse = await generateChatbotResponse(req.query.prompt);
        } else {
            console.warn("No prompt provided for chatbot response");
            chatbotResponse = "[Respuesta no disponible]";
        }
    } catch (error) {
        console.error("Error al generar la respuesta del chatbot:", error);
        chatbotResponse = "[Respuesta no disponible]";
    }

    // Generate paper content if a section is requested
    for (let section of sectionsToGenerate) {
        if (basePaperFiles[section]) {
            try {
                // Read content from the corresponding file for the section part
                const content = fs.readFileSync(basePaperFiles[section], 'utf8');
                
                // Generate variation using OpenAI API
                const variedContent = await generateTextVariation(content);
                
                // Store the varied content only if it is not null
                if (variedContent) {
                    generatedPaper[section] = variedContent;
                }
            } catch (error) {
                console.error(`Error al leer el archivo para la secci√≥n '${section}':`, error);
            }
        } else {
            console.warn(`No se encontraron archivos para la secci√≥n: ${section}`);
        }
    }

    console.log("Chatbot response generated:", chatbotResponse);

    res.json({ paper: generatedPaper, chatbotResponse });
});

// Start the server
app.listen(port, () => {
    console.log(`Servidor corriendo en el puerto ${port}`);
});
